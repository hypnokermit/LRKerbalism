//
//LRTR config was taken from two sources:  The stock KerbalismConfig and the RealismOverhaul config created by Standecco
//https://github.com/Kerbalism/Kerbalism
//https://github.com/Standecco/ROKerbalism
//
// ============================================================================
// The LRTR Simple profile.  Should be used when SimpleISUR is enabled in LRTR/config.cfg
// ============================================================================

Profile
{

	name = lrtrSimple
	
	Supply
	{
		resource = ElectricCharge
		on_eva = 96.0 //8 hrs
		low_message = #KERBALISM_low_battery
		empty_message = #KERBALISM_empty_battery
		refill_message = #KERBALISM_refill_battery
	}

	Supply
	{
		resource = Food
		low_message = #KERBALISM_low_food
		empty_message = #KERBALISM_empty_food
		refill_message = #KERBALISM_refill_food
	}

	Supply
	{
		resource = Water
		low_message = #KERBALISM_low_water
		empty_message = #KERBALISM_empty_water
		refill_message = #KERBALISM_refill_water
	}

	Supply
	{
		resource = Oxygen
		on_eva = 195		 // 8 hrs
		low_message = #KERBALISM_low_oxygen
		empty_message = #KERBALISM_empty_oxygen
		refill_message = #KERBALISM_refill_oxygen
	}

	Supply
	{
		resource = Nitrogen
		low_message = #KERBALISM_low_nitrogen
		empty_message = #KERBALISM_empty_nitrogen
		refill_message = #KERBALISM_refill_nitrogen
	}

	Supply
	{
		resource = Hydrogen
		low_message = #KERBALISM_low_hydrogen
		empty_message = #KERBALISM_empty_hydrogen
		refill_message = #KERBALISM_refill_hydrogen
	}

	Rule
	{
		name = climatization
		input = ElectricCharge
		rate = 0.0001 // per-kelvin (temp diff), per m^3 (living space), per-second
		degeneration = 0.00000007 // about 2h at 100k temp diff in 20m^3
		modifier = temperature,volume,per_capita
		warning_message = #KERBALISM_climatization_warning
		danger_message = #KERBALISM_climatization_danger
		fatal_message = #KERBALISM_climatization_fatal
		relax_message = #KERBALISM_climatization_relax
	}

	Rule
	{
		name = eating
		input = Food
		output = Waste
		rate = 1.94976 // Based on RO-TACLS Profile (5.84928 per day)
		interval = 28800.0 // 3 Meals per day
		individuality = 0.00 // Everyone eats the same amount
		degeneration = 0.0111111 // 90 meals, 30 days (taken from TACLS profile)
		warning_message = #KERBALISM_food_warning
		danger_message = #KERBALISM_food_danger
		fatal_message = #KERBALISM_food_fatal
		relax_message = #KERBALISM_food_relax
	}

	Rule
	{
		name = drinking
		input = Water
		output = Waste
		rate = 0.774144 // Based on RO-TACLS Profile (3.87072 per day)
		interval = 17280.0 // 5 drinks per-day 
		degeneration = 0.0666666 // 15 drinks, 3 days (taken from TACLS profile)
		individuality = 0.00 // Everyone uses the same amount
		warning_message = $ON_VESSEL$KERBAL is thirsty
		danger_message = $ON_VESSEL$KERBAL is dehydrated
		fatal_message = $ON_VESSEL$KERBAL died from dehydration
		relax_message = $ON_VESSEL$KERBAL is enjoying a drink
	}

	Rule
	{
		name = breathing
		input = Oxygen
		output = WasteAtmosphere
		rate = 0.00685 // Based on RO-TACLS Profile (591.84 per day)
		degeneration = 0.00555555 // 3 minutes (taken from TACLS profile)
		modifier = non_breathable
		individuality = 0.00 // Everyone uses the same amount
		warning_message = $ON_VESSEL$KERBAL can't breathe
		danger_message = $ON_VESSEL$KERBAL is suffocating
		fatal_message = $ON_VESSEL$KERBAL suffocated to death
		relax_message = $ON_VESSEL$KERBAL is breathing again
	}

	Rule
	{
		name = co2 poisoning
		degeneration = 0.0005555 // 30 minutes
		modifier = poisoning
		warning_threshold = 0.23
		warning_message = #KERBALISM_co2_warning
		danger_message = #KERBALISM_co2_danger
		fatal_message = #KERBALISM_co2_fatal
		relax_message = #KERBALISM_co2_relax
	}

	Rule
	{
		name = stress
		degeneration = 0.000000008 
		variance = 0.1
		individuality = 0.3
		modifier = living_space,comfort,pressure
		breakdown = true // trigger breakdown event instead of death
		warning_message = #KERBALISM_stress_warning
		danger_message = #KERBALISM_stress_danger
		relax_message = #KERBALISM_stress_relax
	}

	Rule
	{
		name = radiation
		degeneration = 1.0 // just use the modifier
		variance = 0.1 // add per-kerbal variance
		individuality = 0.15
		lifetime = true // this is a life time value
		modifier = radiation,shielding
		warning_threshold = 100.0 // FIXME - probably useless
		danger_threshold = 200.0 // FIXME - probably useless
		fatal_threshold = 300.0 // FIXME - based on the career limit for a 55y old male astronaut of 3 Sv
		warning_message = #KERBALISM_radiation_warning
		danger_message = #KERBALISM_radiation_danger
		fatal_message = #KERBALISM_radiation_fatal
		relax_message = #KERBALISM_radiation_relax
	}

	// convention: 1 capacity = enough to scrub output of 1 crew member for 1 day
	Process
    {
        name = non-regenerative scrubber
        modifier = _NonRegenScrubber
        input = WasteAtmosphere@0.0099    
        input = _NonRegenScrubber@0.0000347   
    }

	// convention: 1 capacity = enough to scrub output of 1 crew member
	Process
	{
		name = scrubber
		modifier = _Scrubber
		input = ElectricCharge@0.025
		input = WasteAtmosphere@0.006216
	}

	// convention: 1 capacity = enough to compensate for leaks in 70 m² surface area (a cube of 40 m³ volume, edge length of 3.42 m) per crew member
	// = 0.00025624796502 N2 to replace the Atmosphere leaked via the atmo leaks process for the above approx needed surface area per crew member
	Process
	{
		name = pressure control
		modifier = _PressureControl,non_breathable
		input = ElectricCharge@0.00858
		input = Nitrogen@0.35	// Much higher than amount needed for leak control to allow speedier pressurization of low pressure habs and inflatables
		output = Atmosphere@0.35
	}

	// convention: When the vessel is in a breathable atmosphere, pressure control is automatically disabled and the air pump will pump air
	// into the vessel to maintain pressurization of any habitable areas, one example is inflating inflatable habitats without using any
	// N2 when a breathable atmosphere is present.
	Process
	{
		name = air pump
		modifier = _AirPump,breathable
		input = ElectricCharge@0.00258
		output = Atmosphere@7.35
	}

	Process
	{
		name = recycler
		modifier = _Recycler
		input = ElectricCharge@0.05
		input = Waste@0.0004166
		output = Water@0.000181 //roughly 80% efficency for water->waste->water cycle
		output = Fertilizer@0.0015
		dump = true
	}

	Process
	{
		name = atmo leaks
		modifier = surface,non_breathable
		input = Atmosphere@0.000001899785682	// leakage of Atmosphere (N2) per second for a surface area of 1 m²
		// From ISS: see https://www.nasa.gov/pdf/179225main_ISS_Poster_Back.pdf and https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/20110012997.pdf
		// 935 m³ volume, ~1105 m² surface (estimated), 0.227 Kg/day (structural)
		// Surface estimation: see the "Atmo Leak Estimation" spreadsheet in misc.
		// 1 Kerbin day is 1/4 of a human day so 0.227/4 = 0.05675 Kg/day
		// 0.05675 Kg/day over 1105 m² = 0.0513352488 (g/m²)/day.
		// Using the density of N2 from CRP we get 1.251 g/KSPunit = 0.0410353707 (unit/m²)/day
		// That divided over 21600 secs = 0.000001899785682 (unit/m²)/sec
	}

	Process
	{
		name = radioisotope generator
		modifier = _RTG
		input = _RTG@0.000000001888 // 28.8 kerbin-year half-life
		output = ElectricCharge@1.0
	}

	Process
	{
		name = fuel cell
		modifier = _FuelCell
		input = Hydrogen@1.0011122892
		input = Oxygen@0.5065967413
		output = Water@0.0008043014
		output = ElectricCharge@2.4026694940	// calculated from H2 @3.75ml/s gives 9W = 2400W/Liter. Referenced from page 14 of https://peer.asee.org/performance-of-a-pem-fuel-cell-system.pdf
		dump_valve = Water
	}

	Process
	{
		name = monoprop fuel cell
		modifier = _MonopropFuelCell
		input = Oxygen@0.510619148925
		input = MonoPropellant@0.000901270123875 // (Hydrazine@0.000718143525)
		output = Nitrogen@0.5038381295
		output = Water@0.0008106876
		output = ElectricCharge@0.1
		dump_valve = Nitrogen,Water,Nitrogen&Water
	}

	Process
	{
		name = water electrolysis
		modifier = _WaterElectrolysis
		input = ElectricCharge@0.03432384991429 //assumes 70% efficency
		input = Water@0.000008043014
		output = Hydrogen@0.010011122892
		output = Oxygen@0.005065967413
		dump_valve = Hydrogen,Oxygen
	}

	Process
	{
		name = oxygen processing
		modifier = _Oxygen
		input = ElectricCharge@0.08
		input = Ore@0.00005
		output = Oxygen@0.0005
		dump_valve = Oxygen
	}

	Process
	{
		name = nitrogen processing
		modifier = _Nitrogen
		input = ElectricCharge@0.18
		input = Ore@0.00005
		output = Nitrogen@0.00005
		dump_valve = Nitrogen
	}

	Process
	{
		name = fuel processing	 // LiquidFuel output balanced to match Oxidizer output
		modifier = _LFO
		input = ElectricCharge@0.1
		input = Ore@0.00125
		input = Water@0.0001
		output = LiquidFuel@0.0000496445
		output = Oxidizer@0.00006067662
		dump_valve = LiquidFuel,Oxidizer,LiquidFuel&Oxidizer
	}

	Process
	{
		name = monopropellant processing	 
		modifier = _Monopropellant
		input = ElectricCharge@0.12 
		input = Ore@0.00150		
		input = Water@0.006
		output = MonoPropellant@0.0001
		dump_valve = MonoPropellant
	}

	Process
	{
		name = shielding processing
		modifier = _Shielding
		input = ElectricCharge@0.1	 
		input = Ore@0.002		
		output = Shielding@0.0001		
		dump_valve = Shielding
	}

    Process
    {
        name = fertilizer processing
        modifier = _Fertilizer
        input = ElectricCharge@0.1
        input = Ore@0.002
        output = Fertilizer@0.001
        dump_valve = Fertilizer
    }	
    
	Process
	{
		name = radiation detox unit
		modifier = _SickbayRDU,zerog
		input = ElectricCharge@3.5
		input = Oxygen@0.002
		cures = radiation@0.000005555554 // 0.02 rad/h
	}

	Process
	{
		name = tranquilizing vortex
		modifier = _SickbayTV
		input = ElectricCharge@0.057 // 32" OLED TV, source : https://www.rtings.com/tv/learn/led-oled-power-consumption-and-electricity-cost
		cures = stress@0.00000000463
	}

	Process
	{
		name = zero gravity shower	// showers are complex
		modifier = _SickbayShower
		input = ElectricCharge@0.014049975308642 //	sustained heating @4.184 J/gK to 313 K from 273 K storage temperature,
		input = Water@0.0000839507	// 5.44 L per shower, source : http://www.marsjournal.org/contents/2006/0005/files/rapp_mars_2006_0005.pdf
		output = Waste@0.0000839507	// water content fully recovered
		interval = 259200 // one shower every 3 days
		cures = stress@0.00000000463
	}

	Process
	{
		name = washer-dryer	// laundry is hard
		modifier = _SickbayLaundry // one complete kerbal outfit is 0.77 kg source : https://ttu-ir.tdl.org/ttu-ir/bitstream/handle/2346/72928/ICES_2017_106.pdf?sequence=1&isAllowed=y
		input = ElectricCharge@0.0463715278 //	13.36 kWh / 3.06 kg clothing
		input = Water@0.0763900389	// 22 L per 3.06 kg clothes
		output = Waste@0.0763900389	// water content fully recovered
		interval = 1036800 // kerbals change clothes every 12 days
		cures = stress@0.00000000463
	}
}



// ============================================================================
// Add configurable Life Support System to all manned parts
// ============================================================================
//
// Adding in consumables here to get better control than on_pod provides
//
@PART[*]:HAS[#CrewCapacity[>0],!MODULE[KerbalSeat]]:NEEDS[ProfileLRTRSIMPLE]:FOR[KerbalismDefault]
{
	//Resources normally added with on_pod.	This allows them to be removed later.
	RESOURCE
	{
		name = Food
		amount = #$/CrewCapacity$
		maxAmount = #$/CrewCapacity$
		@amount *= 0.25125 //1 hour
		@maxAmount *= 0.25125 //1 hour
		@amount *= #$@KERBALISMWORLDPARAMETERS/hoursPerDay$	 // 1 day
		@maxAmount *= #$@KERBALISMWORLDPARAMETERS/hoursPerDay$	 // 1 day
	}		
	RESOURCE
	{
		name = Water
		amount = #$/CrewCapacity$
		maxAmount = #$/CrewCapacity$
		@amount *= 0.165416666666667		// 1 hour
		@maxAmount *= 0.165416666666667		// 1 hour
		@amount *= #$@KERBALISMWORLDPARAMETERS/hoursPerDay$	 // 1 day
		@maxAmount *= #$@KERBALISMWORLDPARAMETERS/hoursPerDay$	 // 1 day
	}		
	RESOURCE
	{
		name = Oxygen
		amount = #$/CrewCapacity$
		maxAmount = #$/CrewCapacity$
		@amount *= 49.86125			// 2 hours
		@maxAmount *= 49.86125			// 2 hours
		@amount *= #$@KERBALISMWORLDPARAMETERS/hoursPerDay$	 // 2 days
		@maxAmount *= #$@KERBALISMWORLDPARAMETERS/hoursPerDay$	 // 2 days		
	} 
		
	MODULE
	{
		name = ProcessController
		resource = _Scrubber
		title = Scrubber
		capacity = #$/CrewCapacity$
		running = true
	}

	MODULE
	{
		name = ProcessController
		resource = _PressureControl
		title = Pressure control
		capacity = #$/CrewCapacity$
		running = true
	}

	MODULE
	{
		name = ProcessController
		resource = _Recycler
		title = Waste recycler
		capacity = #$/CrewCapacity$
		running = true
	}

	MODULE
	{
		name = ProcessController
		resource = _MonopropFuelCell
		title = Monoprop+O2 fuel cell
		capacity = #$/CrewCapacity$
		running = false
	}

	@MODULE[ProcessController],*
	{
		@capacity *= 1.67
	}

	MODULE
	{
		name = Configure
		title = Pod
		slots = 2

		UPGRADES
		{
			UPGRADE
			{
				name__ = Upgrade-Slots
				techRequired__ = basicLifeSupport
				slots = 0
			}
		}

		SETUP
		{
			name = Scrubber
			desc = A regenerative scrubber that removes <b>WasteAtmosphere</b> from the internal atmosphere.
			mass = 0.01
			cost = 250

			MODULE
			{
				type = ProcessController
				id_field = resource
				id_value = _Scrubber
			}
		}

		SETUP
		{
			name = Pressure Control
			desc = Use <b>Nitrogen</b> to maintain the internal atmosphere at a comfortable pressure.
			tech = survivability
			mass = 0.01
			cost = 250

			MODULE
			{
				type = ProcessController
				id_field = resource
				id_value = _PressureControl
			}

			RESOURCE
			{
				// approx 5 days of leaks and volume of a crew member
				// crew going eva will need the volume their bodies displaced within the vessel replaced with N2 to correct pressure drop,
				// vise versa when entering from eva the pressure will increase due to the volume of the Kerbal displacing
				// the internal vessel atmosphere, excess is vented overboard.
				// The pressure controller can be disabled to save N2 that will be used replacing the Kerbals volume,
				name = Nitrogen
				amount = #$/CrewCapacity$
				maxAmount = #$/CrewCapacity$
				@amount *= 13.804166666666667	// 5 hours
				@maxAmount *= 13.804166666666667	// 5 hours
				@amount *= #$@KERBALISMWORLDPARAMETERS/hoursPerDay$	 // 5 days
				@maxAmount *= #$@KERBALISMWORLDPARAMETERS/hoursPerDay$	 // 5 days		
			}
		}

		SETUP
		{
			name = Recycler
			desc = Processes all <b>Waste</b> into <b>Water</b> and some <b>Fertilizer</b>.
			tech = earlyLifeSupport
			mass = 0.05
			cost = 500


			MODULE
			{
				type = ProcessController
				id_field = resource
				id_value = _Recycler
			}

			RESOURCE
			{
				name = Waste
				amount = 0
				maxAmount = #$/CrewCapacity$
				@maxAmount *= 5
			}
		}

		SETUP
		{
			name = Monoprop Oxygen Fuel Cell
			desc = An emergency fuel cell that burns <b>MonoPropellant</b> and <b>Oxygen</b> gas, producing <b>Water</b> and <b>Nitrogen</b> gas as by-products.
			tech = earlyPower
			mass = 0.1
			cost = 1000

			MODULE
			{
				type = ProcessController
				id_field = resource
				id_value = _MonopropFuelCell
			}
		}
	}
}


// ============================================================================
// Add configurable Life Support System to Life Support Unit part
// ============================================================================

@PART[kerbalism-lifesupportmodule]:NEEDS[ProfileLRTRSIMPLE]:FOR[KerbalismDefault]
{
	MODULE
	{
		name = ProcessController
		resource = _Scrubber
		title = Scrubber
		capacity = 3
		running = true
	}

	MODULE
	{
		name = ProcessController
		resource = _PressureControl
		title = Pressure control
		capacity = 3
		running = true
	}

	MODULE
	{
		name = ProcessController
		resource = _AirPump
		title = Air Pump
		capacity = 3
		running = true
	}

	MODULE
	{
		name = ProcessController
		resource = _Recycler
		title = Waste recycler
		capacity = 3
		running = true
	}

	MODULE
	{
		name = ProcessController
		resource = _MonopropFuelCell
		title = Monoprop+O2 fuel cell
		capacity = 3
		running = true
	}

	@MODULE[ProcessController],*
	{
		@capacity *= 1.67
	}

	MODULE
	{
		name = Configure
		title = Life Support
		slots = 2

		UPGRADES
		{
			UPGRADE
			{
				name__ = Upgrade-Slots
				techRequired__ = longTermLifeSupport
				slots = 0
			}
		}

		SETUP
		{
			name = Scrubber
			desc = A regenerative scrubber that removes <b>WasteAtmosphere</b> from the internal atmosphere.
			mass = 0.01
			cost = 250

			MODULE
			{
				type = ProcessController
				id_field = resource
				id_value = _Scrubber
			}
		}

		SETUP
		{
			name = Pressure Control
			desc = Use <b>Nitrogen</b> to maintain the internal atmosphere at a comfortable pressure.
			tech = survivability
			mass = 0.01
			cost = 250

			MODULE
			{
				type = ProcessController
				id_field = resource
				id_value = _PressureControl
			}
		}

		SETUP
		{
			name = Recycler
			desc = Processes all <b>Waste</b> into <b>Water</b> and some <b>Fertilizer</b>.
			tech = earlyLifeSupport
			mass = 0.05
			cost = 500

			MODULE
			{
				type = ProcessController
				id_field = resource
				id_value = _Recycler
			}
		}

		SETUP
		{
			name = Monoprop Oxygen Fuel Cell
			desc = Burns <b>MonoPropellant</b> and <b>Oxygen</b> gas, producing <b>Water</b> and <b>Nitrogen</b> gas as by-products.
			tech = electronicsHuman
			mass = 0.1
			cost = 1000

			MODULE
			{
				type = ProcessController
				id_field = resource
				id_value = _MonopropFuelCell
			}
		}

		SETUP
		{
			name = Air Pump
			desc = Regulates habitat pressure using outside air
			mass = 0.1
			cost = 1000

			MODULE
			{
				type = ProcessController
				id_field = resource
				id_value = _AirPump
			}
		}
	}
}


// ============================================================================
// Add configurable supplies to inline containers
// ============================================================================

//Allow tanks to store ISRU resources.

@PART[*]:HAS[@RESOURCE[Ore]]:NEEDS[ProfileLRTRSIMPLE]:FOR[KerbalismDefault]
{	
	MODULE
	{
 		name = Configure
		title = Resource Container
		slots = 1
		symmetric = true

		SETUP
		{
			name = Ore
			desc = Storage for <b>Ore</b>.

			RESOURCE
			{
				name = Ore
				amount = 0
				maxAmount = #$../../../RESOURCE[Ore]/maxAmount$
			}

		}

		SETUP
		{
			name = Water
			desc = Storage for <b>Water</b>.

			RESOURCE
			{
				name = Water
				amount = 0
				maxAmount = #$../../../RESOURCE[Ore]/maxAmount$
				@maxAmount *= 5
			}
		}
	}
	
	-RESOURCE[Ore] {}

}

// container volume is in Liters, calculated from the containers size and stored in the parts .cfg file
// amount and maxAmount are percentages of a full container at atmospheric pressure, e.g. 1 = 100%, 0.5 = 50%, 5 = 500% (or pressurized to 5 bar)

@PART[kerbalism-container-inline-*|kerbalism-container-hex-*|kerbalism-container-radial-box-*]:NEEDS[ProfileLRTRSIMPLE]:FOR[KerbalismDefault]
{
	MODULE
	{
		name = Configure
		title = Supply Container
		slots = 1
		symmetric = true

		SETUP
		{
			name = Supplies	//	Ratio of Food and Water amounts are the same as a Kerbals intake
			desc = Store a balanced supply of <b>Food</b> and <b>Water</b>.

			RESOURCE
			{
				name = Food
				amount = 0.603
				maxAmount = 0.603
				@amount *= #$/ContainerVolume$
				@maxAmount *= #$/ContainerVolume$
			}

			RESOURCE
			{
				name = Water
				amount = 0.397
				maxAmount = 0.397
				@amount *= #$/ContainerVolume$
				@maxAmount *= #$/ContainerVolume$
			}
		}

		SETUP
		{
			name = Food

			RESOURCE
			{
				name = Food
				amount = 1
				maxAmount = 1
				@amount *= #$/ContainerVolume$
				@maxAmount *= #$/ContainerVolume$
			}
		}

		SETUP
		{
			name = Water

			RESOURCE
			{
				name = Water
				amount = 1
				maxAmount = 1
				@amount *= #$/ContainerVolume$
				@maxAmount *= #$/ContainerVolume$
			}
		}

		SETUP
		{
			name = Waste	
			desc = Store solid and liquid organic <b>Waste</b>.

			RESOURCE
			{
				name = Waste
				amount = 0
				maxAmount = 1
				@amount *= #$/ContainerVolume$
				@maxAmount *= #$/ContainerVolume$
			}

		 }

		 SETUP
		 {
		    name = Fertilizer
		    
		    RESOURCE
		    {
		        name = Fertilizer
		        amount = 1
		        maxAmount = 1
				@amount *= #$/ContainerVolume$
				@maxAmount *= #$/ContainerVolume$		        
		    }
		 }
	}
}

// ============================================================================
// Add configurable supplies to radial containers
// ============================================================================

// container volume is in Liters, calculated from the containers size and stored in the parts .cfg file
// amount and maxAmount are percentages of a full container at atmospheric pressure, e.g. 1 = 100%, 0.5 = 50%, 5 = 500% (or pressurized to 5 bar)

@PART[kerbalism-container-radial-pressurized-*|kerbalism-container-radial-small|kerbalism-container-radial-medium|kerbalism-container-radial-big|kerbalism-container-radial-huge]:NEEDS[ProfileLRTRSIMPLE]:FOR[KerbalismDefault]
{
	MODULE
	{
		name = Configure
		title = Pressurized Tank
		slots = 1
		symmetric = true

		SETUP
		{
			name = Oxygen	// Stored at 200 bar (2940psi) when full
			desc = Store pressurized <b>Oxygen</b> gas @ 200 bar.

			RESOURCE
			{
				name = Oxygen
				amount = 200
				maxAmount = 200
				@amount *= #$/ContainerVolume$
				@maxAmount *= #$/ContainerVolume$
			}
		}

		SETUP
		{
			name = Nitrogen	// Stored at 180 bar (2646psi) when full
			desc = Store pressurized <b>Nitrogen</b> gas @ 180 bar.

			RESOURCE
			{
				name = Nitrogen
				amount = 180
				maxAmount = 180
				@amount *= #$/ContainerVolume$
				@maxAmount *= #$/ContainerVolume$
			}
		}

		SETUP
		{
			name = Hydrogen	// Stored at 700 bar (10290psi) when full
			desc = Store pressurized <b>Hydrogen</b> gas @ 700 bar.

			RESOURCE
			{
				name = Hydrogen
				amount = 700
				maxAmount = 700
				@amount *= #$/ContainerVolume$
				@maxAmount *= #$/ContainerVolume$
			}
		}

		SETUP
		{
			name = Xenon Gas	// Stored at 180 bar (2646psi) when full
			desc = Store pressurized <b>Xenon</b> gas @ 180 bar.
			tech = ionPropulsion

			RESOURCE
			{
				name = XenonGas
				amount = 180
				maxAmount = 180
				@amount *= #$/ContainerVolume$
				@maxAmount *= #$/ContainerVolume$
			}
		}
	}
}

// ============================================================================
// Setup greenhouse
// ============================================================================

@PART[kerbalism-greenhouse]:NEEDS[ProfileLRTRSIMPLE]:FOR[KerbalismDefault]
{
	MODULE
	{
		name = Greenhouse

		crop_resource = Food								// name of resource produced by harvests
		// Based on design targets from Prototype Lunar Greenhouse (see https://www.ag.arizona.edu/lunargreenhouse/MidReviews.htm ):
		// Design targets are on slide 18 of https://www.ag.arizona.edu/lunargreenhouse/Documents/2012-07-20_01_Giacomelli.pdf
		// Prototype Lunar Greenhouse geometry can be found on slide 14 of https://www.ag.arizona.edu/lunargreenhouse/Documents/2012-07-20_01_Giacomelli.pdf
		// Much larger design for producing food for 6 people can be found here (values not used): https://www.degruyter.com/downloadpdf/j/opag.2017.2.issue-1/opag-2017-0011/opag-2017-0011.pdf
		// This Greenhouse is assumed to have 24 m^3 volume dedicated to food production (all greenhouses in mod support files are calculated relative to this one).
		// This Greenhouse is intended to support 0.5 Kerbal just like the Prototype Lunar Greenhouse.
		// Harvest time is 200 days, but in order to avoid micromanagement this greenhouse supports 0.5 Kerbal for 210 days.
		crop_size = 585								 // amount of resource produced by harvests
		crop_rate = 0.00000005787					 // growth per second when all conditions apply, a fully grown crop equals value of 1.0
		ec_rate = 2.5											 // EC/s consumed by the lamp at max intensity

		light_tolerance = 400.0						 // minimum lighting flux required for growth, in W/m^2
		pressure_tolerance = 0.1						// minimum pressure required for growth, in sea level atmospheres
		radiation_tolerance = 0.000008333	 // maximum radiation allowed for growth in rad/s, considered after shielding is applied

		lamps = Cylinder001								 // object with emissive texture used to represent lamp intensity graphically
		shutters = door										 // animation to manipulate shutters
		plants =														// animation to represent plant growth graphically

		INPUT_RESOURCE
		{
			name = Fertilizer
			rate = 0.0005078125						 // 15 units required per unit of crop, i.e. 200 days * 3600 seconds per hour * 24 hours * rate == 15 * crop_size
		}

		INPUT_RESOURCE
		{
			name = Water
			rate = 0.0000169271			        	 // 0.5 units required per unit of crop, i.e. 200 days * 3600 seconds per hour * 24 hours * rate == 0.5 * crop_size
		}

		OUTPUT_RESOURCE
		{
			name = Oxygen
			rate = 0.00685      				// 100% of oxygen required by 1 crew member, based on Prototype Lunar Greenhouse design targets
		}                                       // (percentage is factor 2 larger than food)
	}

	MODULE
	{
		name = ProcessController
		resource = _PressureControl
		title = Pressure control
		capacity = 0.2143
		running = true
	}

	RESOURCE
	{
		name = Fertilizer
		amount = 8775					 // enough for 201 days , one crop cycle
		maxAmount = 8775
	}

    // To support the pressure control
    RESOURCE
    {
        name = Nitrogen
        amount = 3000           // enough for 201 days , one crop cycle
        maxAmount = 3000
    }
	
	RESOURCE
	{
		name = Water
		amount = 60							// enough for 208 days including reclaimed water from wastes, one crop cycle, two greenhouses combined
		maxAmount = 60
	}
}


// ============================================================================
// ISRU chemical plants
// ============================================================================

@PART[kerbalism-chemicalplant,MiniISRU,ISRU]:NEEDS[ProfileLRTRSIMPLE]:FOR[KerbalismDefault]
{
	!MODULE[ModuleResourceConverter]:HAS[#ConverterName[Lf+Ox]] {}
	!MODULE[ModuleResourceConverter]:HAS[#ConverterName[LiquidFuel]] {}
	!MODULE[ModuleResourceConverter]:HAS[#ConverterName[Oxidizer]] {}
	!MODULE[ModuleResourceConverter]:HAS[#ConverterName[Monoprop]] {}
	!MODULE[ModuleResourceConverter]:HAS[#ConverterName[MonoPropellant]] {}
	!MODULE[ModuleOverheatDisplay] {}
	!MODULE[ModuleCoreHeat] {}

	MODULE
	{
		name = ProcessController
		resource = _WaterElectrolysis
		title = Water electrolysis
		capacity = 1
	}

	MODULE
	{
		name = ProcessController
		resource = _Oxygen
		title = Oxygen processor
		capacity = 1
	}
	
	MODULE
	{
		name = ProcessController
		resource = _LFO
		title = LiquidFuel and Oxidizer processor
		capacity = 1
	}

	MODULE
	{
		name = ProcessController
		resource = _Monopropellant
		title = Monopropellant processor
		capacity = 1
	}

	MODULE
	{
		name = ProcessController
		resource = _Shielding
		title = Shielding processor
		capacity = 1
	}

	MODULE
	{
		name = ProcessController
		resource = _Fertilizer
		title = Fertilizer processor
		capacity = 1
	}

	MODULE
	{
		name = ProcessController
		resource = _Nitrogen
		title = Nitrogen processor
		capacity = 1
	}

	MODULE
	{
		name = Configure
		title = Chemical Plant
		slots = 1

		UPGRADES
		{
			UPGRADE
			{
				name__ = Upgrade-Slots
				techRequired__ = longTermLifeSupport
				slots = 0
			}
		}

		SETUP
		{
			name = Water Electrolysis
			desc = Split <b>Water</b> into its <b>Hydrogen</b> and <b>Oxygen</b> components.

			MODULE
			{
				type = ProcessController
				id_field = resource
				id_value = _WaterElectrolysis
			}
		}

		SETUP
		{
			name = Oxygen Production
			desc = <b>Ore</b> is processed to extract <b>Oxygen</b>.
			tech = longTermLifeSupport

			MODULE
			{
				type = ProcessController
				id_field = resource
				id_value = _Oxygen
			}
		}

		SETUP
		{
			name = Nitrogen Production
			desc = <b>Ore</b> is processed to extract <b>Nitrogen</b>.
			tech = longTermLifeSupport

			MODULE
			{
				type = ProcessController
				id_field = resource
				id_value = _Nitrogen
			}
		}

		SETUP
		{
			name = LiquidFuel and Oxidizer Production
			desc = <b>Ore</b> and <b>Water</b> are processed to create <b>LiquidFuel</b> and <b>Oxidizer</b>.

			MODULE
			{
				type = ProcessController
				id_field = resource
				id_value = _LFO
			}
		}

		SETUP
		{
			name = Monopropellant Production
			desc = <b>Ore</b> and <b>Water</b> are processed to create <b>Monopropellant</b>.
			tech = improvedLifeSupport

			MODULE
			{
				type = ProcessController
				id_field = resource
				id_value = _Monopropellant
			}
		}

		SETUP
		{
			name = Shielding Production
			desc = Compact <b>Ore</b> to the density of <b>shielding material</b>.
			tech = improvedLifeSupport

			MODULE
			{
				type = ProcessController
				id_field = resource
				id_value = _Shielding
			}
		}

		SETUP
		{
			name = Fertilizer Production
			desc = <b>Ore</b> is processed to create <b>Fertilizer</b>.
			tech = longTermLifeSupport

			MODULE
			{
				type = ProcessController
				id_field = resource
				id_value = _Fertilizer
			}
		}
	}
	MODULE:NEEDS[FeatureReliability]
	{
		name = Reliability
		type = ProcessController
		title = Chemical Plant
		repair = Engineer
		mtbf = 8 // in years
		@mtbf *= 3600 //seconds per hour
		@mtbf *= #$@KERBALISMWORLDPARAMETERS/hoursPerDay$
		@mtbf *= #$@KERBALISMWORLDPARAMETERS/daysPerYear$
		extra_cost = 1.0
		extra_mass = 0.2
	}
}

// ============================================================================
// ISRU drills
// ============================================================================

@PART[MiniDrill,RadialDrill]:NEEDS[ProfileLRTRSIMPLE]:FOR[KerbalismDefault]
{
	!MODULE[ModuleResourceHarvester] {}
	!MODULE[ModuleOverheatDisplay] {}
	!MODULE[ModuleCoreHeat] {}

	// Crustal - - -
	MODULE
	{
		name = Harvester
		title = Water Excavation
		drill = ImpactTransform
		length = 1.25
		type = 0
		resource = Water
		min_abundance = 0.01
		// https://www.nasa.gov/sites/default/files/atoms/files/mars_ice_drilling_assessment_v6_for_public_release.pdf shows
		// water harvesters from Ice at a rate of 50-400 L/day, as a middle ground we choose 65 L/day for the small harvester
		// which when scaled by factor 5 for the big harvester becomes 325 L/day.
		rate = 0.00075 // 65 L/day / (24 hours/day * 3600 seconds/hour)
		// This is the maximum abundance on a random planet/moon
		// And the average on Duna poles, which are the only place where at the time writing higher than baseline water levels are modeled
		// And lower than what is found on Kerbin and Laythe
		abundance_rate = 0.1
		ec_rate = 1.0
	}

	MODULE
	{
		name = Harvester
		title = Ore Excavation
		drill = ImpactTransform
		length = 1.25
		type = 0
		resource = Ore
		min_abundance = 0.02
		rate = 0.000625
		ec_rate = 1.0
	}

	MODULE
	{
		name = Configure
		title = Drill
		slots = 1

		SETUP
		{
			name = Water Extraction
			desc = Extract <b>Water</b> from the surface.

			MODULE
			{
				type = Harvester
				id_field = resource
				id_value = Water
			}

			RESOURCE
			{
				name = Water
				amount = 0
				maxAmount = 50
			}
		}

		SETUP
		{
			name = Ore Extraction
			desc = Extract <b>Ore</b> from the surface.

			MODULE
			{
				type = Harvester
				id_field = resource
				id_value = Ore
			}

			RESOURCE
			{
				name = Ore
				amount = 0
				maxAmount = 50
			}
		}
	}

	MODULE:NEEDS[FeatureReliability]
	{
		name = Reliability
		type = Harvester
		title = Harvester
		repair = Engineer
		mtbf = 8 // in years
		@mtbf *= 3600 //seconds per hour
		@mtbf *= #$@KERBALISMWORLDPARAMETERS/hoursPerDay$
		@mtbf *= #$@KERBALISMWORLDPARAMETERS/daysPerYear$
		extra_cost = 1.0
		extra_mass = 0.2
	}
}



@PART[kerbalism-minipump,kerbalism-radialpump]:NEEDS[ProfileLRTRSIMPLE]:FOR[KerbalismDefault]
{
	!MODULE[ModuleResourceHarvester] {}
	!MODULE[ModuleOverheatDisplay] {}
	!MODULE[ModuleCoreHeat] {}
	!MODULE[ModuleAsteroidDrill] {}

	// Oceanic - - -
	MODULE
	{
		name = Harvester
		title = Water Pump
		drill = ImpactTransform
		length = 1.25
		type = 1
		resource = Water
		min_abundance = 0.02
		rate = 0.00075
		ec_rate = 1.0
	}

	MODULE
	{
		name = Configure
		title = Pump
		slots = 1

		SETUP
		{
			name = Water Extraction
			desc = Extract <b>Water</b> from the ocean.

			MODULE
			{
				type = Harvester
				id_field = resource
				id_value = Water
			}

			RESOURCE
			{
				name = Water
				amount = 0
				maxAmount = 50
			}
		}

	}

	MODULE:NEEDS[FeatureReliability]
	{
		name = Reliability
		type = Harvester
		title = Harvester
		repair = Engineer
		mtbf = 8 // in years
		@mtbf *= 3600 //seconds per hour
		@mtbf *= #$@KERBALISMWORLDPARAMETERS/hoursPerDay$
		@mtbf *= #$@KERBALISMWORLDPARAMETERS/daysPerYear$
		extra_cost = 1.0
		extra_mass = 0.2
	}
}

// ============================================================================
// atmospheric harvester
// the atmospheric experiment part is used as an atmospheric harvester
// ============================================================================

@PART[sensorAtmosphere]:NEEDS[ProfileLRTRSIMPLE]:FOR[KerbalismDefault]
{
	MODULE
	{
		name = Harvester
		title = Oxygen Filter
		type = 2
		resource = Oxygen
		min_abundance = 0.02
		min_pressure = 5.0
		rate = 0.0625
		ec_rate = 0.5
	}

	MODULE
	{
		name = Harvester
		title = Nitrogen Filter
		type = 2
		resource = Nitrogen
		min_abundance = 0.01
		min_pressure = 2.0
		rate = 0.0875
		ec_rate = 0.5
	}

	MODULE
	{
		name = Configure
		title = Atmospheric Filter
		slots = 1

		SETUP
		{
			name = Oxygen Filter
			desc = Extract <b>Oxygen</b> from the atmosphere.

			MODULE
			{
				type = Harvester
				id_field = resource
				id_value = Oxygen
			}
		}

		SETUP
		{
			name = Nitrogen Filter
			desc = Extract <b>Nitrogen</b> from the atmosphere.

			MODULE
			{
				type = Harvester
				id_field = resource
				id_value = Nitrogen
			}
		}
	}

	MODULE:NEEDS[FeatureReliability]
	{
		name = Reliability
		type = Harvester
		title = Harvester
		repair = Engineer
		mtbf = 8 // in years
		@mtbf *= 3600 //seconds per hour
		@mtbf *= #$@KERBALISMWORLDPARAMETERS/hoursPerDay$
		@mtbf *= #$@KERBALISMWORLDPARAMETERS/daysPerYear$
		extra_cost = 1.0
		extra_mass = 0.5
	}

	@mass = 0.2
}
